"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var STX = 0x02;
var ETX = 0x03;

module.exports = /*#__PURE__*/function () {
  function LRC() {
    _classCallCheck(this, LRC);
  }

  _createClass(LRC, null, [{
    key: "fromHexArray",
    value: function fromHexArray(hexArray) {
      return hexArray.reduce(function (accumulator, _byte) {
        if (accumulator === null) return _byte;
        return accumulator ^ _byte;
      }, null);
    }
  }, {
    key: "fromString",
    value: function fromString(payload) {
      var hexArray = payload.split('').map(function (_char) {
        return _char.charCodeAt(0);
      });
      return this.fromHexArray(hexArray);
    }
  }, {
    key: "asStxEtx",
    value: function asStxEtx(hexArray) {
      if (typeof hexArray === 'string') hexArray = hexArray.split('').map(function (_char2) {
        return _char2.charCodeAt(0);
      });
      if (hexArray[0] === STX) hexArray = hexArray.splice(1);
      if (hexArray[hexArray.length - 1] !== ETX) hexArray.push(ETX);
      var lrc = this.fromHexArray(hexArray);
      return [STX].concat(_toConsumableArray(hexArray), [lrc]);
    }
  }]);

  return LRC;
}();