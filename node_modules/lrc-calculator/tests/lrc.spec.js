const lrc = require('../index');

describe("LRC calculator", () => {
    it('gets the LRC of a given array of hex bytes', () => {
        let result = lrc.fromHexArray([0x30, 0x38, 0x30, 0x30, 0x03]);
        expect(result).toStrictEqual(0x0b);

        result = lrc.fromHexArray([0x30, 0x35, 0x30, 0x30, 0x7c, 0x7c, 0x03]);
        expect(result).toStrictEqual(0x06);
    })

    it('gets the LRC of a given array of hex bytes in string format ', () => {
        let result = lrc.fromHexArray(['0x30', '0x38', '0x30', '0x30', '0x03']);
        expect(result).toStrictEqual(0x0b);
    })

    it ('get the LRC of a given string', () => {
        let result = lrc.fromString('0800');
        expect(result).toStrictEqual(0x0b);
    })

    it ('returns an STX/ETX message from a hex array', ()=> {
        let result = lrc.asStxEtx([0x30, 0x38, 0x30, 0x30, 0x03]);
        expect(result).toStrictEqual([0x02, 0x30, 0x38, 0x30, 0x30, 0x03, 0x0B]);
    });

    it ('returns an STX/ETX message from a hex array starting with STX', ()=> {
        let result = lrc.asStxEtx([0x02, 0x30, 0x38, 0x30, 0x30, 0x03]);
        expect(result).toStrictEqual([0x02, 0x30, 0x38, 0x30, 0x30, 0x03, 0x0B]);
    });

    it ('returns an STX/ETX message from a hex array starting with STX and without ETX', ()=> {
        let result = lrc.asStxEtx([0x02, 0x30, 0x38, 0x30, 0x30]);
        expect(result).toStrictEqual([0x02, 0x30, 0x38, 0x30, 0x30, 0x03, 0x0B]);
    });

    it ('returns an STX/ETX message from a hex array without STX nor ETX', ()=> {
        let result = lrc.asStxEtx([ 0x30, 0x38, 0x30, 0x30]);
        expect(result).toStrictEqual([0x02, 0x30, 0x38, 0x30, 0x30, 0x03, 0x0B]);
    });

    it ('returns an STX/ETX message from a string payload', ()=> {
        let result = lrc.asStxEtx('0800');
        expect(result).toStrictEqual([0x02, 0x30, 0x38, 0x30, 0x30, 0x03, 0x0B]);
    });

})
