{"version":3,"file":"transbank.js","mappings":"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","sources":["webpack://transbank-pos-sdk/./index.js","webpack://transbank-pos-sdk/./node_modules/@serialport/parser-inter-byte-timeout/dist/index.js","webpack://transbank-pos-sdk/./node_modules/lrc-calculator/dist/lrc.js","webpack://transbank-pos-sdk/./node_modules/lrc-calculator/index.js","webpack://transbank-pos-sdk/./src/PosAutoservicio.js","webpack://transbank-pos-sdk/./src/PosBase.js","webpack://transbank-pos-sdk/./src/PosIntegrado.js","webpack://transbank-pos-sdk/./src/responseCodes.js","webpack://transbank-pos-sdk/external commonjs2 \"serialport\"","webpack://transbank-pos-sdk/external node-commonjs \"events\"","webpack://transbank-pos-sdk/external node-commonjs \"stream\"","webpack://transbank-pos-sdk/webpack/bootstrap","webpack://transbank-pos-sdk/webpack/startup"],"sourcesContent":["const POSIntegrado = require(\"./src/PosIntegrado\");\nconst POSAutoservicio = require(\"./src/PosAutoservicio\");\n\nconst Transbank = {\n  POSIntegrado,\n  POSAutoservicio\n};\n\nmodule.exports = Transbank;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InterByteTimeoutParser = void 0;\nconst stream_1 = require(\"stream\");\n/**\n * A transform stream that buffers data and emits it after not receiving any bytes for the specified amount of time or hitting a max buffer size.\n */\nclass InterByteTimeoutParser extends stream_1.Transform {\n    maxBufferSize;\n    currentPacket;\n    interval;\n    intervalID;\n    constructor({ maxBufferSize = 65536, interval, ...transformOptions }) {\n        super(transformOptions);\n        if (!interval) {\n            throw new TypeError('\"interval\" is required');\n        }\n        if (typeof interval !== 'number' || Number.isNaN(interval)) {\n            throw new TypeError('\"interval\" is not a number');\n        }\n        if (interval < 1) {\n            throw new TypeError('\"interval\" is not greater than 0');\n        }\n        if (typeof maxBufferSize !== 'number' || Number.isNaN(maxBufferSize)) {\n            throw new TypeError('\"maxBufferSize\" is not a number');\n        }\n        if (maxBufferSize < 1) {\n            throw new TypeError('\"maxBufferSize\" is not greater than 0');\n        }\n        this.maxBufferSize = maxBufferSize;\n        this.currentPacket = [];\n        this.interval = interval;\n    }\n    _transform(chunk, encoding, cb) {\n        if (this.intervalID) {\n            clearTimeout(this.intervalID);\n        }\n        for (let offset = 0; offset < chunk.length; offset++) {\n            this.currentPacket.push(chunk[offset]);\n            if (this.currentPacket.length >= this.maxBufferSize) {\n                this.emitPacket();\n            }\n        }\n        this.intervalID = setTimeout(this.emitPacket.bind(this), this.interval);\n        cb();\n    }\n    emitPacket() {\n        if (this.intervalID) {\n            clearTimeout(this.intervalID);\n        }\n        if (this.currentPacket.length > 0) {\n            this.push(Buffer.from(this.currentPacket));\n        }\n        this.currentPacket = [];\n    }\n    _flush(cb) {\n        this.emitPacket();\n        cb();\n    }\n}\nexports.InterByteTimeoutParser = InterByteTimeoutParser;\n","\"use strict\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar STX = 0x02;\nvar ETX = 0x03;\n\nmodule.exports = /*#__PURE__*/function () {\n  function LRC() {\n    _classCallCheck(this, LRC);\n  }\n\n  _createClass(LRC, null, [{\n    key: \"fromHexArray\",\n    value: function fromHexArray(hexArray) {\n      return hexArray.reduce(function (accumulator, _byte) {\n        if (accumulator === null) return _byte;\n        return accumulator ^ _byte;\n      }, null);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(payload) {\n      var hexArray = payload.split('').map(function (_char) {\n        return _char.charCodeAt(0);\n      });\n      return this.fromHexArray(hexArray);\n    }\n  }, {\n    key: \"asStxEtx\",\n    value: function asStxEtx(hexArray) {\n      if (typeof hexArray === 'string') hexArray = hexArray.split('').map(function (_char2) {\n        return _char2.charCodeAt(0);\n      });\n      if (hexArray[0] === STX) hexArray = hexArray.splice(1);\n      if (hexArray[hexArray.length - 1] !== ETX) hexArray.push(ETX);\n      var lrc = this.fromHexArray(hexArray);\n      return [STX].concat(_toConsumableArray(hexArray), [lrc]);\n    }\n  }]);\n\n  return LRC;\n}();","const lrc = require('./dist/lrc');\n\nmodule.exports = lrc;\n","const POSBase = require('./PosBase')\n\nmodule.exports = class POSAutoservicio extends POSBase {\n\n    sale(amount, ticket, sendStatus = false, sendVoucher = false, callback = null) {\n        amount = amount.toString().padStart(9, \"0\").slice(0, 9)\n        ticket = ticket.toString().padStart(6, \"0\").slice(0, 6)\n        let status = sendStatus ? \"1\" : \"0\"\n        let voucher = sendVoucher ? \"1\" : \"0\"\n\n        return this.send(`0200|${amount}|${ticket}|${voucher}|${status}`, true, callback).then((data) => {\n            return this.saleResponse(data)\n        })\n    }\n\n    saleResponse(payload) {\n        let chunks = payload.split(\"|\")\n        let authorizationCode = typeof chunks[5] !== 'undefined' ? chunks[5].trim() : null;\n\n        let response = {\n            functionCode: parseInt(chunks[0]),\n            responseCode: parseInt(chunks[1]),\n            responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n            commerceCode: parseInt(chunks[2]),\n            terminalId: chunks[3],\n            successful: parseInt(chunks[1]) === 0,\n            ticket: chunks[4],\n            authorizationCode: authorizationCode,\n            amount: parseInt(chunks[6]),\n            last4Digits: chunks[7] !== '' ? parseInt(chunks[7]) : null,\n            operationNumber: chunks[8],\n            cardType: chunks[9],\n            accountingDate: chunks[10],\n            accountNumber: chunks[11],\n            cardBrand: chunks[12],\n            realDate: chunks[13],\n            realTime: chunks[14],\n            voucher: chunks[15]?.match(/.{1,40}/g),\n            shareType: chunks[16],\n            sharesNumber: chunks[17],\n            sharesAmount: chunks[18],\n            sharesTypeComment: chunks[19]\n        };\n        return response;\n    }\n\n    getLastSale(sendVoucher = false) {\n        let voucher = sendVoucher ? \"1\" : \"0\"\n        return this.send(`0250|${voucher}`).then((data) => {\n            try {\n                return this.saleResponse(data)\n            } catch (e) {\n                throw new Error(e.getMessage())\n            }\n        })\n    }\n\n    refund() {\n        return this.send(`1200`).then((data) => {\n            let chunks = data.split(\"|\")\n            return {\n                functionCode: parseInt(chunks[0].replace(/\\D+/g, '')),\n                responseCode: parseInt(chunks[1]),\n                commerceCode: parseInt(chunks[2]),\n                terminalId: chunks[3],\n                authorizationCode: chunks[4].trim(),\n                operationId: chunks[5],\n                responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n                successful: parseInt(chunks[1]) === 0\n            }\n        })\n    }\n\n    closeDay(sendVoucher = false) {\n        let voucher = sendVoucher ? \"1\" : \"0\"\n        return this.send(`0500|${voucher}`).then((data) => {\n            let chunks = data.split(\"|\")\n            return {\n                functionCode: parseInt(chunks[0]),\n                responseCode: parseInt(chunks[1]),\n                commerceCode: parseInt(chunks[2]),\n                terminalId: chunks[3],\n                voucher: chunks[4]?.match(/.{1,40}/g),\n                responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n                successful: parseInt(chunks[1]) === 0\n            }\n        })\n    }\n\n    initialization() {\n        return this.send(\"0070\", false)\n    }\n\n    initializationResponse() {\n        return this.send(\"0080\").then((data) => {\n            let chunks = data.split(\"|\")\n            return {\n                functionCode: parseInt(chunks[0]),\n                responseCode: parseInt(chunks[1]),\n                transactionDate: parseInt(chunks[2]),\n                transactionTime: chunks[3],\n                responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n                successful: parseInt(chunks[1])===0\n            }\n        })\n    }\n\n}","const LRC = require(\"lrc-calculator\")\nconst { SerialPort } = require(\"serialport\")\nconst EventEmitter = require('events');\nconst { InterByteTimeoutParser } = require(\"@serialport/parser-inter-byte-timeout\")\nconst responseMessages = require(\"./responseCodes\");\nconst ACK = 0x06\n\nmodule.exports = class POSBase extends EventEmitter {\n\n    constructor() {\n        super()\n\n        this.currentPort = null\n        this.connected = false\n        this.defaultBaudRate = this.constructor.name === 'POSAutoservicio' ? 19200 : 115200 \n        this.ackTimeout = 2000\n        this.posTimeout = 150000\n        this.debugEnabled = false\n        this.port = null\n        this.responseAsString = true\n        this.waiting = false\n        this.connecting = false;\n\n        this.responseCallback = function () {\n        }\n        this.ackCallback = function () {\n        }\n    }\n\n    /*\n     |--------------------------------------------------------------------------\n     | Getters and Setters\n     |--------------------------------------------------------------------------\n     */\n\n    debug(...args) {\n        if (this.debugEnabled) {\n            console.log(...args)\n        }\n    }\n\n    setDebug(debug = true) {\n        this.debugEnabled = debug\n    }\n\n    getResponsesAsString() {\n        this.responseAsString = true\n    }\n\n    getResponsesAsHexArray() {\n        this.responseAsString = false\n    }\n\n    getConnectedPort() {\n        return this.currentPort\n    }\n\n    isConnected() {\n        return this.connected\n    }\n\n\n    raw_serial_port() {\n        return this.port\n    }\n\n    raw_parser() {\n        return this.parser\n    }\n\n    listPorts() {\n        return SerialPort.list()\n    }\n\n    bufferToPrintableString(buffer) {\n        let printableString = \"\";\n        const lrcIndex = buffer.length - 1;\n        \n        buffer.forEach((char, index) => {\n            if(index === lrcIndex) {\n                printableString += `{0x${char.toString(16).padStart(2, \"0\")}}`;\n            }\n            else {\n                printableString += 32 <= char && char < 126 \n                  ? String.fromCharCode(char) : `{0x${char.toString(16).padStart(2, \"0\")}}`;\n            }\n        });\n        return printableString;\n    }\n\n    /*\n     |--------------------------------------------------------------------------\n     | Serial Port Handling\n     |--------------------------------------------------------------------------\n     */\n\n\n    connect(portName = null, baudRate = this.defaultBaudRate) {\n        this.debug(\"Connecting to \" + portName + \" @\" + baudRate)\n\n        return new Promise((resolve, reject) => {\n            // Block so just one connect command can be sent at a time\n            if (this.connecting === true) {\n                return reject(new Error(\"Another connect command was already sent and it is still waiting\"))\n            }\n\n            if (this.connected) {\n                this.debug(\"Trying to connect to a port while its already connected. Disconnecting... \")\n                this.disconnect().then(() => {\n                    resolve(this.connect(portName, baudRate))\n                }).catch(() => {\n                    resolve(this.connect(portName, baudRate))\n                })\n                this.connecting = false\n                return\n            }\n\n            this.connecting = true\n\n            this.port = new SerialPort({\n                path: portName,\n                baudRate: baudRate,\n                autoOpen: false\n            })\n\n            this.port.open((err) => {\n                if (err) {\n                    this.debug(\"Error opening port\", err)\n                    return reject(new Error('Could not open serial connection...'));\n                }\n            })\n            this.parser = this.port.pipe(new InterByteTimeoutParser({ interval: 100 }))\n\n            this.parser.on(\"data\", (data) => {\n                this.debug(`IN <-- ${this.bufferToPrintableString(data)}`)\n\n                // Primero, se recibe un ACK\n                if (this.itsAnACK(data)) {\n                    if (typeof this.ackCallback === \"function\") {\n                        this.ackCallback(data)\n                    }\n                    return\n                }\n\n                // Si se recibió una respuesta (diferente a un ACK) entonces responder con un ACK y mandar el mensaje por callback\n                this.port.write(Buffer.from([ACK]))\n                this.debug(`OUT --> ${this.bufferToPrintableString([ACK])}`)\n                if (typeof this.responseCallback === \"function\") {\n                    this.responseCallback(data)\n                }\n\n            }) // will emit data if there is a pause between packets of at least 30ms\n\n\n            this.port.on(\"open\", () => {\n                this.debug(\"Port opened\")\n                this.connected = true\n                this.poll().then(() => {\n                    this.currentPort = portName\n                    this.emit('port_opened', this.currentPort);\n                    resolve(true)\n                }).catch(async (e) => {\n                    this.connected = false\n                    this.waiting = false\n                    this.currentPort = null\n                    if (this.port.isOpen) {\n                        await this.disconnect();\n                    }\n                    reject(e)\n                })\n\n            })\n\n            this.port.on(\"close\", () => {\n                this.debug(\"Port closed\")\n                this.currentPort = null\n                this.waiting = false\n                this.connected = false\n                this.emit('port_closed');\n            })\n\n            this.connecting = false\n        })\n    }\n\n    disconnect() {\n        return new Promise((resolve, reject) => {\n\n            if (!this.port?.isOpen) {\n                resolve(true)\n                return\n            }\n\n            this.port.close((error) => {\n                if (error) {\n                    this.debug(\"Error closing port\", error)\n                    reject(error)\n                } else {\n                    this.debug(\"Port closed successfully\")\n                    resolve(true);\n                }\n            })\n\n        })\n\n    }\n\n    async autoconnect(baudrate = this.defaultBaudRate) {\n        // Block so just one autoconnect command can be sent at a time\n        if (this.connecting === true) {\n            this.debug(\"It is already trying to connect. Please wait for it to finish\")\n            return false\n        }\n\n        const ports = await this.listPorts()\n\n        for (let port of ports) {\n            this.debug(\"Trying to connect to \" + port.path)\n            try {\n                await this.connect(port.path, baudrate)\n                this.connecting = false;\n                return port\n            } catch (e) {\n                this.debug(\"Error to connect \" + port.path)\n                console.log(e)\n            }\n        }\n\n        this.connecting = false;\n        this.debug(\"Autoconnection failed\")\n        return false\n    }\n\n    send(payload, waitResponse = true, callback = null) {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) {\n                return reject(new Error(\"You have to connect to a POS to send this message: \" + payload.toString()))\n            }\n            // Block so just one message can be sent at a time\n            if (this.waiting === true) {\n                return reject(new Error(\"Another message was already sent and it is still waiting for a response from the POS\"))\n            }\n            this.waiting = true\n\n            // Assert the ack arrives before the given timeout.\n            let timeout = setTimeout(() => {\n                this.waiting = false\n                clearTimeout(responseTimeout)\n                reject(new Error(\"ACK has not been received in \" + this.ackTimeout + \" ms.\"))\n            }, this.ackTimeout)\n\n            // Defines what should happen when the ACK is received\n            this.ackCallback = () => {\n                clearTimeout(timeout)\n                if (!waitResponse) {\n                    this.waiting = false\n                    resolve(true)\n                }\n            }\n\n            // Prepare the message\n            let buffer = Buffer.from(LRC.asStxEtx(payload))\n\n            this.debug(`OUT --> ${this.bufferToPrintableString(buffer)}`)\n\n            //Send the message\n            this.port.write(buffer, function (err) {\n                if (err) {\n                    this.debug(\"Error sending message\", err)\n                    reject(new Error('Failed to send message to POS.'));\n                }\n            })\n\n            let responseTimeout = setTimeout(() => {\n                this.waiting = false\n                reject(new Error(`Response of POS has not been received in ${this.posTimeout / 1000} seconds`))\n            }, this.posTimeout)\n\n            // Wait for the response and fullfill the Promise\n            this.responseCallback = (data) => {\n                clearTimeout(responseTimeout)\n                let response = data\n                if (this.responseAsString) {\n                    response = data.toString().slice(1, -2)\n                }\n                let functionCode = data.toString().slice(1, 5)\n                \n                if (functionCode === \"0900\") { // Sale status messages\n                    if (typeof callback === \"function\"){\n                        callback(this.intermediateResponse(response), data)\n                    }\n                    return\n                }\n                if (functionCode === \"0261\") {\n                    if (typeof callback === \"function\"){\n                        callback(response, data)\n                    }\n                    return\n                }\n\n                this.waiting = false\n\n                resolve(response, data)\n            }\n\n        })\n    }\n\n    getResponseMessage(response) {\n        return typeof responseMessages[response] !== \"undefined\" ? responseMessages[response] : null\n    }\n\n    itsAnACK(data) {\n        return Buffer.compare(data, Buffer.from([ACK])) === 0\n    }\n\n    /*  \n     |--------------------------------------------------------------------------\n     | Shared Commands\n     |--------------------------------------------------------------------------\n    */\n\n    poll() {\n        return this.send(\"0100\", false)\n    }\n\n    loadKeys() {\n        return this.send(\"0800\").then((data) => {\n            let chunks = data.split(\"|\")\n            return {\n                functionCode: parseInt(chunks[0]),\n                responseCode: parseInt(chunks[1]),\n                commerceCode: parseInt(chunks[2]),\n                terminalId: chunks[3],\n                responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n                successful: parseInt(chunks[1])===0\n            }\n        })\n    }\n\n    intermediateResponse(payload) {\n        let chunks = payload.split(\"|\")\n        let response = {\n            responseCode: parseInt(chunks[1]),\n            responseMessage: this.getResponseMessage(parseInt(chunks[1]))\n        }\n\n        return response;\n    }\n}","const POSBase = require('./PosBase')\nconst FUNCTION_CODE_MULTICODE_SALE = '0271';\n\nmodule.exports = class POSIntegrado extends POSBase {\n\n    /*\n     |--------------------------------------------------------------------------\n     | POS Methods\n     |--------------------------------------------------------------------------\n     */\n\n    closeDay() {\n        return this.send(\"0500||\").then((data) => {\n            let chunks = data.split(\"|\")\n            return {\n                functionCode: parseInt(chunks[0]),\n                responseCode: parseInt(chunks[1]),\n                commerceCode: parseInt(chunks[2]),\n                terminalId: chunks[3],\n                responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n                successful: parseInt(chunks[1])===0\n            }\n        })\n    }\n\n    getLastSale() {\n        return this.send(\"0250|\").then((data) => {\n            try {\n                return this.saleResponse(data)\n            } catch (e) {\n                throw new Error(e.getMessage())\n            }\n\n        })\n    }\n\n    getTotals() {\n        return this.send(\"0700||\").then((data) => {\n            let chunks = data.split(\"|\")\n            return {\n                functionCode: parseInt(chunks[0]),\n                responseCode: parseInt(chunks[1]),\n                txCount: parseInt(chunks[2]),\n                txTotal: parseInt(chunks[3]),\n                responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n                successful: parseInt(chunks[1])===0\n            }\n        })\n    }\n\n    salesDetail(printOnPos = false) {\n        return new Promise((resolve, reject) => {\n\n            if(typeof printOnPos !== 'boolean' && typeof printOnPos !== 'string') {\n                return reject(new Error(\"printOnPos must be of type boolean.\"))\n            }\n\n            if(typeof printOnPos === 'string') {\n                printOnPos = (printOnPos === 'true' || printOnPos === '1')\n            }\n\n            let print = printOnPos ? \"0\":\"1\"\n            let sales = []\n\n            let promise = this.send(`0260|${print}|`, !printOnPos, onEverySale.bind(this))\n            if (printOnPos) {\n                resolve(promise)\n            }\n\n            function onEverySale(sale) {\n\n                let detail = this.saleDetailResponse(sale.toString().slice(1, -2))\n                if (detail.authorizationCode=== \"\" || detail.authorizationCode === null) {\n                    resolve(sales)\n                    return\n                }\n                sales.push(detail)\n            }\n\n        })\n\n    }\n\n    refund(operationId) {\n        if (typeof operationId===\"undefined\") {\n            throw new Error(\"Operation ID not provided when calling refund method.\")\n        }\n\n        operationId = operationId.toString().slice(0, 6)\n        return this.send(`1200|${operationId}|`).then((data) => {\n            let chunks = data.split(\"|\")\n            return {\n                functionCode: parseInt(chunks[0]),\n                responseCode: parseInt(chunks[1]),\n                commerceCode: parseInt(chunks[2]),\n                terminalId: chunks[3],\n                authorizationCode: chunks[4].trim(),\n                operationId: chunks[5],\n                responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n                successful: parseInt(chunks[1])===0\n            }\n        })\n    }\n\n    changeToNormalMode() {\n        return this.send(\"0300\", false)\n    }\n\n    sale(amount, ticket, sendStatus = false, callback = null) {\n        amount = amount.toString().padStart(9, \"0\").slice(0, 9)\n        ticket = ticket.toString().padStart(6, \"0\").slice(0, 6)\n        let status = sendStatus ? \"1\":\"0\"\n\n        return this.send(`0200|${amount}|${ticket}|||${status}`, true, callback).then((data) => {\n            return this.saleResponse(data)\n        })\n    }\n\n    multicodeSale(amount, ticket, commerceCode = null, sendStatus = false, callback = null) {\n        amount = amount.toString().padStart(9, \"0\").slice(0, 9)\n        ticket = ticket.toString().padStart(6, \"0\").slice(0, 6)\n        commerceCode = commerceCode === null ? '0' : commerceCode;\n        let status = sendStatus ? \"1\":\"0\"\n\n        return this.send(`0270|${amount}|${ticket}|||${status}|${commerceCode}`, true, callback).then((data) => {\n            return this.saleResponse(data)\n        })\n    }\n\n    /*\n     |--------------------------------------------------------------------------\n     | Responses\n     |--------------------------------------------------------------------------\n     */\n\n    saleDetailResponse(payload) {\n        let chunks = payload.split(\"|\")\n        let authorizationCode = typeof chunks[5] !== 'undefined' ? chunks[5].trim() : null;\n        return {\n            functionCode: parseInt(chunks[0]),\n            responseCode: parseInt(chunks[1]),\n            commerceCode: parseInt(chunks[2]),\n            terminalId: chunks[3],\n            responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n            successful: parseInt(chunks[1])===0,\n            ticket: chunks[4],\n            authorizationCode: authorizationCode,\n            amount: chunks[6],\n            last4Digits: parseInt(chunks[7]),\n            operationNumber: chunks[8],\n            cardType: chunks[9],\n            accountingDate: chunks[10],\n            accountNumber: chunks[11],\n            cardBrand: chunks[12],\n            realDate: chunks[13],\n            realTime: chunks[14],\n            employeeId: chunks[15],\n            tip: parseInt(chunks[16]),\n            feeAmount: (chunks[16]),\n            feeNumber: (chunks[17])\n        }\n    }\n\n    saleResponse(payload) {\n        let chunks = payload.split(\"|\")\n        let authorizationCode = typeof chunks[5] !== 'undefined' ? chunks[5].trim() : null;\n        let response = {\n            functionCode: parseInt(chunks[0]),\n            responseCode: parseInt(chunks[1]),\n            commerceCode: parseInt(chunks[2]),\n            terminalId: chunks[3],\n            responseMessage: this.getResponseMessage(parseInt(chunks[1])),\n            successful: parseInt(chunks[1])===0,\n            ticket: chunks[4],\n            authorizationCode: authorizationCode,\n            amount: parseInt(chunks[6]),\n            sharesNumber: chunks[7],\n            sharesAmount: chunks[8],\n            last4Digits: chunks[9] !== '' ? parseInt(chunks[9]) : null,\n            operationNumber: chunks[10],\n            cardType: chunks[11],\n            accountingDate: chunks[12],\n            accountNumber: chunks[13],\n            cardBrand: chunks[14],\n            realDate: chunks[15],\n            realTime: chunks[16],\n            employeeId: chunks[17],\n            tip: chunks[18] !== '' ? parseInt(chunks[18]) : null\n        };\n        if (chunks[0] === FUNCTION_CODE_MULTICODE_SALE) {\n            response.change = chunks[20];\n            response.commerceCode = chunks[21];\n        }\n        return response;\n    }\n}\n","module.exports = {\n    0: \"Aprobado\",\n    1: \"Rechazado\",\n    2: \"Host no Responde\",\n    3: \"Conexión Fallo\",\n    4: \"Transacción ya Fue Anulada\",\n    5: \"No existe Transacción para Anular\",\n    6: \"Tarjeta no Soportada\",\n    7: \"Transacción Cancelada desde el POS\",\n    8: \"No puede Anular Transacción Debito\",\n    9: \"Error Lectura Tarjeta\",\n    10: \"Monto menor al mínimo permitido\",\n    11: \"No existe venta\",\n    12: \"Transacción No Soportada\",\n    13: \"Debe ejecutar cierre \",\n    14: \"No hay Tono\",\n    15: \"Archivo BITMAP.DAT no encontrado. Favor cargue\",\n    16: \"Error Formato Respuesta del HOST\",\n    17: \"Error en los 4 últimos dígitos.\",\n    18: \"Menú invalido\",\n    19: \"ERROR_TARJ_DIST\",\n    20: \"Tarjeta Invalida\",\n    21: \"Anulación no Permitida\",\n    22: \"TIMEOUT\",\n    24: \"Impresora Sin Papel\",\n    25: \"Fecha Invalida\",\n    26: \"Debe Cargar Llaves\",\n    27: \"Debe Actualizar\",\n    60: \"Error en Número de Cuotas\",\n    61: \"Error en Armado de Solicitud\",\n    62: \"Problema con el Pinpad interno\",\n    65: \"Error al Procesar la Respuesta del Host\",\n    67: \"Superó Número Máximo de Ventas, Debe Ejecutar Cierre\",\n    68: \"Error Genérico, Falla al Ingresar Montos\",\n    70: \"Error de formato Campo de Boleta MAX 6\",\n    71: \"Error de Largo Campo de Impresión\",\n    72: \"Error de Monto Venta, Debe ser Mayor que 0\",\n    73: \"Terminal ID no configurado\",\n    74: \"Debe Ejecutar CIERRE\",\n    75: \"Comercio no tiene Tarjetas Configuradas\",\n    76: \"Supero Número Máximo de Ventas, Debe Ejecutar CIERRE\",\n    77: \"Debe Ejecutar Cierre\",\n    78: \"Esperando Leer Tarjeta\",\n    79: \"Solicitando Confirmar Monto\",\n    80: \"Selección de Cuotas\",\n    81: \"Solicitando Ingreso de Clave\",\n    82: \"Enviando transacción al Host\",\n    83: \"Seleccion menu credito/redcompra\",\n    84: \"Opere tarjeta\",\n    85: \"Seleccion de cuotas\",\n    86: \"Ingreso de cuotas\",\n    87: \"Confirmacion de cuotas\",\n    88: \"Error Cantidad Cuotas\",\n    93: \"Declinada\",\n    94: \"Error al Procesar Respuesta\",\n    95: \"Error al Imprimir TASA\"\n}\n","module.exports = require(\"serialport\");","module.exports = require(\"events\");","module.exports = require(\"stream\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(237);\n"],"names":["Transbank","POSIntegrado","POSAutoservicio","module","exports","Object","defineProperty","value","InterByteTimeoutParser","stream_1","Transform","maxBufferSize","currentPacket","interval","intervalID","constructor","transformOptions","super","TypeError","Number","isNaN","this","_transform","chunk","encoding","cb","clearTimeout","offset","length","push","emitPacket","setTimeout","bind","Buffer","from","_flush","_arrayLikeToArray","arr","len","i","arr2","Array","_defineProperties","target","props","descriptor","enumerable","configurable","writable","key","STX","LRC","instance","Constructor","_classCallCheck","staticProps","hexArray","reduce","accumulator","_byte","payload","split","map","_char","charCodeAt","fromHexArray","_char2","splice","lrc","concat","isArray","_arrayWithoutHoles","iter","Symbol","iterator","_iterableToArray","o","minLen","n","prototype","toString","call","slice","name","test","_unsupportedIterableToArray","_nonIterableSpread","POSBase","sale","amount","ticket","sendStatus","sendVoucher","callback","padStart","status","voucher","send","then","data","saleResponse","chunks","authorizationCode","trim","functionCode","parseInt","responseCode","responseMessage","getResponseMessage","commerceCode","terminalId","successful","last4Digits","operationNumber","cardType","accountingDate","accountNumber","cardBrand","realDate","realTime","match","shareType","sharesNumber","sharesAmount","sharesTypeComment","getLastSale","e","Error","getMessage","refund","replace","operationId","closeDay","initialization","initializationResponse","transactionDate","transactionTime","SerialPort","EventEmitter","responseMessages","currentPort","connected","defaultBaudRate","ackTimeout","posTimeout","debugEnabled","port","responseAsString","waiting","connecting","responseCallback","ackCallback","debug","args","console","log","setDebug","getResponsesAsString","getResponsesAsHexArray","getConnectedPort","isConnected","raw_serial_port","raw_parser","parser","listPorts","list","bufferToPrintableString","buffer","printableString","lrcIndex","forEach","char","index","String","fromCharCode","connect","portName","baudRate","Promise","resolve","reject","disconnect","catch","path","autoOpen","open","err","pipe","on","itsAnACK","write","poll","emit","async","isOpen","close","error","autoconnect","baudrate","ports","waitResponse","timeout","responseTimeout","asStxEtx","response","intermediateResponse","compare","loadKeys","getTotals","txCount","txTotal","salesDetail","printOnPos","print","sales","promise","detail","saleDetailResponse","changeToNormalMode","multicodeSale","employeeId","tip","feeAmount","feeNumber","change","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__"],"sourceRoot":""}